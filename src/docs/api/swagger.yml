openapi: 3.0.0
info:
  title: "JokkoHealth API"
  version: "1.0.0"
  description: >
    Documentation de l'API pour JokkoHealth.  
    JokkoHealthBackEnd répond à un besoin urgent au Sénégal, où l'accès aux soins médicaux est limité, en particulier dans les zones rurales.
    Le manque de médecins spécialistes, combiné à une distance importante entre les patients et les hôpitaux, entraîne des délais critiques dans les situations d'urgence.

servers:
  - url: "http://localhost:3001/api"
    description: "Serveur de développement"

paths:
  /auth/login:
    post:
      summary: "Connexion utilisateur"
      description: "Permet à un utilisateur de se connecter et d'obtenir un jeton d'authentification."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Connexion réussie"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: "Identifiants invalides"

  /auth/register:
    post:
      summary: "Inscription utilisateur"
      description: "Permet d'enregistrer un nouvel utilisateur."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: "Utilisateur enregistré avec succès"
        "400":
          description: "Données invalides"

  /users:
    get:
      summary: "Récupérer tous les utilisateurs"
      description: "Récupère la liste de tous les utilisateurs stockés dans la base de données."
      responses:
        "200":
          description: "Liste des utilisateurs récupérée avec succès"
        "500":
          description: "Erreur interne du serveur"

    post:
      summary: "Créer un nouvel utilisateur"
      description: "Crée un utilisateur avec les informations fournies."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: "Utilisateur créé avec succès"
        "400":
          description: "Données invalides"

  /users/{id}:
    get:
      summary: "Récupérer un utilisateur par ID"
      description: "Récupère les informations d'un utilisateur spécifique."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID de l'utilisateur"
      responses:
        "200":
          description: "Utilisateur trouvé"
        "404":
          description: "Utilisateur non trouvé"

    put:
      summary: "Mettre à jour un utilisateur"
      description: "Met à jour les informations d'un utilisateur spécifique."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID de l'utilisateur"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: "Utilisateur mis à jour avec succès"
        "404":
          description: "Utilisateur non trouvé"
        "400":
          description: "Données invalides"

    delete:
      summary: "Supprimer un utilisateur"
      description: "Supprime un utilisateur spécifique de la base de données."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID de l'utilisateur"
      responses:
        "204":
          description: "Utilisateur supprimé avec succès"
        "404":
          description: "Utilisateur non trouvé"

  /users/preferences:
    get:
      summary: "Get user preferences"
      description: "Retrieves the preferences of the logged-in user."
      responses:
        "200":
          description: "Successful retrieval of user preferences"
        "401":
          description: "Unauthorized"

  /messages:
    post:
      summary: "Add a message"
      description: "Adds a new message to the chat."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderId:
                  type: string
                  example: "67b74745dea578a10872721e"
                text:
                  type: string
                  example: "Hello, how are you?"
                chatId:
                  type: string
                  example: "67b87ccd852422ff79dfaf32"
      responses:
        "200":
          description: "Message added successfully"
        "500":
          description: "Error adding message"

  /messages/{chatId}:
    get:
      summary: "Get messages by chat ID"
      description: "Retrieves all messages associated with a specific chat."
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: string
            example: "67b87ccd852422ff79dfaf32"
          description: "ID of the chat to retrieve messages from"
      responses:
        "200":
          description: "Successful retrieval of messages"
        "404":
          description: "Chat not found"
        "500":
          description: "Error retrieving messages"

  /chats:
    post:
      summary: "Create a chat"
      description: "Creates a new chat between two users."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderId:
                  type: string
                  example: "67b74745dea578a10872721e"
                receiverId:
                  type: string
                  example: "67b74756dea578a108727220"
      responses:
        "200":
          description: "Chat created successfully"
        "500":
          description: "Error creating chat"
    get:
      summary: "List all chats"
      description: "Retrieves a list of all chats."
      responses:
        "200":
          description: "Successful retrieval of chats"
        "500":
          description: "Error retrieving chats"

  /chats/{userId}:
    get:
      summary: "Get user chats"
      description: "Retrieves all chats for a specific user."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: string
            example: "67b74745dea578a10872721e"
          description: "ID of the user to retrieve chats for"
      responses:
        "200":
          description: "Successful retrieval of user chats"
        "404":
          description: "User not found"
        "500":
          description: "Error retrieving chats"

  /chats/find/{firstId}/{secondId}:
    get:
      summary: "Find a chat"
      description: "Finds a chat between two users."
      parameters:
        - name: "firstId"
          in: "path"
          required: true
          schema:
            type: string
            example: "67b74745dea578a10872721e"
          description: "ID of the first user"
        - name: "secondId"
          in: "path"
          required: true
          schema:
            type: string
            example: "67b74756dea578a108727220"
          description: "ID of the second user"
      responses:
        "200":
          description: "Chat found successfully"
        "404":
          description: "Chat not found"
        "500":
          description: "Error finding chat"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "exemple@jokkohealth.com"
        motDePasse:
          type: string
          example: "MotDePasse123"
      required:
        - email
        - motDePasse

    RegisterRequest:
      type: object
      properties:
        nom:
          type: string
          example: "Diop"
        prenom:
          type: string
          example: "Ndiawar"
        email:
          type: string
          format: email
          example: "ndiawar@example.com"
        role:
          type: string
          enum: [ "Patient", "Médecin", "SuperAdmin" ]
          example: "Médecin"
        dateNaissance:
          type: string
          format: date
          example: "1995-05-15"
        sexe:
          type: string
          enum: [ "Homme", "Femme" ]
          example: "Homme"
        telephone:
          type: string
          example: "774123456"
      required:
        - nom
        - prenom
        - email
        - role
        - telephone

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600
          description: "Expiration time of the token"
