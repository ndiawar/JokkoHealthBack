swagger: "2.0"
info:
  description: "API documentation for JokkoHealthBackEnd"
  version: "1.0.0"
  title: "JokkoHealth API"
host: "localhost:3000"
basePath: "/api/v1"
schemes:
  - "http"
  - "https"
paths:
  /auth/login:
    post:
      summary: "User login"
      description: "Logs in a user and returns a token."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
              password:
                type: "string"
      responses:
        200:
          description: "Successful login"
        401:
          description: "Invalid credentials"

  /auth/register:
    post:
      summary: "User registration"
      description: "Registers a new user."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
              password:
                type: "string"
              name:
                type: "string"
      responses:
        201:
          description: "User registered successfully"
        400:
          description: "Invalid input"

  /users/profile:
    get:
      summary: "Get user profile"
      description: "Retrieves the profile of the logged-in user."
      responses:
        200:
          description: "Successful retrieval of user profile"
        401:
          description: "Unauthorized"

  /users/preferences:
    get:
      summary: "Get user preferences"
      description: "Retrieves the preferences of the logged-in user."
      responses:
        200:
          description: "Successful retrieval of user preferences"
        401:
          description: "Unauthorized"

  /messages:
    post:
      summary: "Add a message"
      description: "Adds a new message to the chat."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              senderId:
                type: "string"
                example: "67b74745dea578a10872721e"
              text:
                type: "string"
                example: "Hello, how are you?"
              chatId:
                type: "string"
                example: "67b87ccd852422ff79dfaf32"
      responses:
        200:
          description: "Message added successfully"
        500:
          description: "Error adding message"

  /messages/{chatId}:
    get:
      summary: "Get messages by chat ID"
      description: "Retrieves all messages associated with a specific chat."
      parameters:
        - name: chatId
          in: path
          required: true
          description: "ID of the chat to retrieve messages from"
          type: string
          example: "67b87ccd852422ff79dfaf32"
      responses:
        200:
          description: "Successful retrieval of messages"
        404:
          description: "Chat not found"
        500:
          description: "Error retrieving messages"

  /chats:
    post:
      summary: "Create a chat"
      description: "Creates a new chat between two users."
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              senderId:
                type: "string"
                example: "67b74745dea578a10872721e"
              receiverId:
                type: "string"
                example: "67b74756dea578a108727220"
      responses:
        200:
          description: "Chat created successfully"
        500:
          description: "Error creating chat"
    get:
      summary: "List all chats"
      description: "Retrieves a list of all chats."
      responses:
        200:
          description: "Successful retrieval of chats"
        500:
          description: "Error retrieving chats"

  /chats/{userId}:
    get:
      summary: "Get user chats"
      description: "Retrieves all chats for a specific user."
      parameters:
        - name: userId
          in: path
          required: true
          description: "ID of the user to retrieve chats for"
          type: string
          example: "67b74745dea578a10872721e"
      responses:
        200:
          description: "Successful retrieval of user chats"
        404:
          description: "User not found"
        500:
          description: "Error retrieving chats"

  /chats/find/{firstId}/{secondId}:
    get:
      summary: "Find a chat"
      description: "Finds a chat between two users."
      parameters:
        - name: firstId
          in: path
          required: true
          description: "ID of the first user"
          type: string
          example: "67b74745dea578a10872721e"
        - name: secondId
          in: path
          required: true
          description: "ID of the second user"
          type: string
          example: "67b74756dea578a108727220"
      responses:
        200:
          description: "Chat found successfully"
        404:
          description: "Chat not found"
        500:
          description: "Error finding chat"