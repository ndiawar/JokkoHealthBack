import User from '../../models/user/userModel.js'; // Importer le mod√®le utilisateur
import { validationResult } from 'express-validator'; // Importer les r√©sultats de validation
import bcrypt from 'bcryptjs'; // Importer bcrypt pour le hachage des mots de passe
import jwt from 'jsonwebtoken'; // Importer jsonwebtoken pour la gestion des tokens
import crypto from 'crypto'; // Importer crypto pour la g√©n√©ration de tokens s√©curis√©s
import emailService from '../../services/email/emailService.js'; // Importer le service d'email

class PasswordController {
    // üìå Demande de r√©initialisation de mot de passe (mot de passe oubli√©)
    async forgotPassword(req, res) {
        const { email } = req.body; // R√©cup√©rer l'email du corps de la requ√™te

        if (!email) {
            return res.status(400).json({ message: "L'email est requis" }); // V√©rifier si l'email est fourni
        }

        try {
            const user = await User.findOne({ email }); // Trouver l'utilisateur par email
            if (!user) {
                return res.status(404).json({ message: "Aucun utilisateur trouv√© avec cet email" }); // V√©rifier si l'utilisateur existe
            }

            const timeDifference = Date.now() - user.lastResetPasswordAttempt; // Calculer la diff√©rence de temps depuis la derni√®re tentative
            const timeLimit = 3600000; // 1 heure en millisecondes
            const maxAttempts = 7; // Limite de tentatives

            if (user.resetPasswordAttempts >= maxAttempts && timeDifference < timeLimit) {
                return res.status(429).json({ message: `Trop de tentatives. Veuillez r√©essayer dans ${Math.floor(timeLimit / 60000)} minutes.` }); // V√©rifier les tentatives r√©centes
            }

            if (timeDifference >= timeLimit) {
                user.resetPasswordAttempts = 0; // R√©initialiser les tentatives apr√®s 1 heure
            }

            user.resetPasswordAttempts += 1; // Mettre √† jour les tentatives de r√©initialisation
            user.lastResetPasswordAttempt = Date.now(); // Mettre √† jour la derni√®re tentative
            await user.save(); // Sauvegarder l'utilisateur

            // G√©n√©rer un token de r√©initialisation s√©curis√©
            const resetToken = crypto.randomBytes(32).toString('hex');
            const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

            user.resetPasswordToken = hashedToken; // Sauvegarder le token hach√©
            user.resetPasswordExpires = Date.now() + 3600000; // Expiration dans 1 heure
            await user.save(); // Sauvegarder l'utilisateur

            const resetUrl = `http://localhost:3000/create-password?token=${resetToken}&id=${user._id}`; // Construire l'URL de r√©initialisation

            // Envoyer un email de r√©initialisation avec le lien
            await emailService.sendEmail({
                to: email,
                subject: 'R√©initialisation de votre mot de passe',
                text: `Vous avez demand√© la r√©initialisation de votre mot de passe. Cliquez sur le lien suivant pour le r√©initialiser : ${resetUrl}`,
                html: `<p>Vous avez demand√© la r√©initialisation de votre mot de passe.</p>
                    <p>Cliquez sur le lien suivant pour le r√©initialiser : <a href="${resetUrl}">R√©initialiser mon mot de passe</a></p>`
            });

            return res.status(200).json({ message: "Un email de r√©initialisation a √©t√© envoy√©" }); // R√©pondre que l'email a √©t√© envoy√©
        } catch (error) {
            console.error("Erreur lors de la r√©initialisation du mot de passe:", error); // G√©rer les erreurs
            return res.status(500).json({ message: "Erreur serveur" }); // R√©pondre avec une erreur serveur
        }
    }

    // üìå R√©initialisation effective du mot de passe
    async resetPassword(req, res) {
        const { token, id } = req.query; // R√©cup√©rer le token et l'ID depuis l'URL
        const { newPassword, confirmPassword } = req.body; // R√©cup√©rer les mots de passe depuis le corps de la requ√™te
    
        // V√©rifications de base
        if (!token || !id || !newPassword || !confirmPassword) {
            return res.status(400).json({ message: "Param√®tres manquants" });
        }
    
        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "Les mots de passe ne correspondent pas" });
        }
    
        try {
            // Hacher le token re√ßu
            const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
    
            // Trouver l'utilisateur avec le token hach√© et v√©rifier l'expiration
            const user = await User.findOne({
                _id: id,
                resetPasswordToken: hashedToken, // Comparer avec le token hach√© stock√©
                resetPasswordExpires: { $gt: Date.now() } // V√©rifier que le token n'a pas expir√©
            });
    
            if (!user) {
                return res.status(400).json({ message: "Token invalide ou expir√©" });
            }
    
            // Hacher le nouveau mot de passe
            user.motDePasse = await bcrypt.hash(newPassword, 10);
    
            // R√©initialiser les champs li√©s au token
            user.resetPasswordToken = undefined;
            user.resetPasswordExpires = undefined;
            user.resetPasswordAttempts = 0; // R√©initialiser les tentatives
            await user.save();
    
            // Envoyer un email de confirmation
            await emailService.sendEmail({
                to: user.email,
                subject: 'Votre mot de passe a √©t√© r√©initialis√©',
                text: 'Votre mot de passe a √©t√© mis √† jour avec succ√®s.',
                html: '<p>Votre mot de passe a √©t√© mis √† jour avec succ√®s.</p>'
            });
    
            // R√©ponse de succ√®s
            return res.status(200).json({ message: "Mot de passe r√©initialis√© avec succ√®s" });
    
        } catch (error) {
            console.error("Erreur dans resetPassword:", error);
            return res.status(500).json({ message: "Erreur serveur" });
        }
    }

    async changePassword(req, res) {
        const { currentPassword, newPassword } = req.body; // R√©cup√©rer l'ancien et le nouveau mot de passe
        const userId = req.user.id; // R√©cup√©rer l'id de l'utilisateur authentifi√©
    
        if (!currentPassword || !newPassword) {
            return res.status(400).json({ message: "Ancien et nouveau mot de passe requis" });
        }
    
        try {
            const user = await User.findById(userId); // Trouver l'utilisateur par id
            if (!user) {
                return res.status(404).json({ message: "Utilisateur non trouv√©" });
            }
    
            const isMatch = await bcrypt.compare(currentPassword, user.motDePasse); // Comparer l'ancien mot de passe
            if (!isMatch) {
                return res.status(401).json({ message: "L'ancien mot de passe est incorrect" });
            }
    
            user.motDePasse = await bcrypt.hash(newPassword, 10); // Hacher le nouveau mot de passe
            await user.save(); // Sauvegarder l'utilisateur
    
            // Envoyer un email de confirmation
            await emailService.sendEmail({
                to: user.email,
                subject: 'Confirmation du changement de mot de passe',
                text: 'Votre mot de passe a √©t√© chang√© avec succ√®s.',
                html: '<p>Votre mot de passe a √©t√© chang√© avec succ√®s.</p>'
            });
    
            // D√©connecter l'utilisateur
            const token = req.cookies.jwt; // R√©cup√©rer le token JWT √† partir des cookies
            if (!token) {
                return res.status(400).json({ message: "Token manquant" });
            }
    
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            if (!decoded) {
                return res.status(400).json({ message: "Token invalide" });
            }
    
            // Ajouter le token √† la liste noire
            const blacklistedToken = new BlacklistedToken({
                token,
                expiresAt: new Date(decoded.exp * 1000)
            });
    
            await blacklistedToken.save();
            res.clearCookie('jwt'); // Supprimer le cookie JWT
    
            // R√©ponse de succ√®s
            return res.status(200).json({ message: "Mot de passe modifi√© avec succ√®s. Vous avez √©t√© d√©connect√©." });
    
        } catch (error) {
            console.error("Erreur dans changePassword:", error);
            return res.status(500).json({ message: "Erreur serveur" });
        }
    }
}

export default new PasswordController();
