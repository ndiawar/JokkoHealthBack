import User from '../../models/user/userModel.js'; // Importer le mod√®le utilisateur
import BlacklistedToken from '../../models/auth/blacklistedToken.js'; // Import du mod√®le
import { validationResult } from 'express-validator'; // Importer les r√©sultats de validation
import bcrypt from 'bcryptjs'; // Importer bcrypt pour le hachage des mots de passe
import jwt from 'jsonwebtoken'; // Importer jsonwebtoken pour la gestion des tokens
import crypto from 'crypto'; // Importer crypto pour la g√©n√©ration de tokens s√©curis√©s
import emailService from '../../services/email/emailService.js';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import mjml from 'mjml';
import fs from 'fs';

// Utilisation de fileURLToPath pour obtenir le r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

class PasswordController {
    // M√©thode priv√©e pour v√©rifier le mot de passe actuel
    _verifyPassword = async (user, password) => {
        return await bcrypt.compare(password, user.motDePasse);
    }

    // üìå Demande de r√©initialisation de mot de passe (mot de passe oubli√©)
    async forgotPassword(req, res) {
        console.log("D√©but de forgotPassword");
        console.log("Corps de la requ√™te:", req.body);
        const { email } = req.body; // R√©cup√©rer l'email du corps de la requ√™te

        if (!email) {
            console.log("Email manquant dans la requ√™te");
            return res.status(400).json({ message: "L'email est requis" }); // V√©rifier si l'email est fourni
        }

        try {
            console.log("Recherche de l'utilisateur avec l'email:", email);
            const user = await User.findOne({ email }); // Trouver l'utilisateur par email
            if (!user) {
                console.log("Aucun utilisateur trouv√© avec cet email");
                return res.status(404).json({ message: "Aucun utilisateur trouv√© avec cet email" }); // V√©rifier si l'utilisateur existe
            }

            const timeDifference = Date.now() - user.lastResetPasswordAttempt; // Calculer la diff√©rence de temps depuis la derni√®re tentative
            const timeLimit = 3600000; // 1 heure en millisecondes
            const maxAttempts = 7; // Limite de tentatives

            if (user.resetPasswordAttempts >= maxAttempts && timeDifference < timeLimit) {
                return res.status(429).json({ message: `Trop de tentatives. Veuillez r√©essayer dans ${Math.floor(timeLimit / 60000)} minutes.` }); // V√©rifier les tentatives r√©centes
            }

            if (timeDifference >= timeLimit) {
                user.resetPasswordAttempts = 0; // R√©initialiser les tentatives apr√®s 1 heure
            }

            user.resetPasswordAttempts += 1; // Mettre √† jour les tentatives de r√©initialisation
            user.lastResetPasswordAttempt = Date.now(); // Mettre √† jour la derni√®re tentative
            await user.save(); // Sauvegarder l'utilisateur

            // G√©n√©rer un token de r√©initialisation s√©curis√©
            const resetToken = crypto.randomBytes(32).toString('hex');
            const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

            user.resetPasswordToken = hashedToken; // Sauvegarder le token hach√©
            user.resetPasswordExpires = Date.now() + 3600000; // Expiration dans 1 heure
            await user.save(); // Sauvegarder l'utilisateur

            const resetUrl = `https://jokko-health-front-end.vercel.app/create-password?token=${resetToken}&id=${user._id}`; // Construire l'URL de r√©initialisation

            // Charger le template MJML
            const mjmlFilePath = path.join(__dirname, '../../../src/templates/emails/resetPassword/resetPassword.mjml');
            const mjmlContent = fs.readFileSync(mjmlFilePath, 'utf8');

            // Compiler le MJML en HTML
            const { html } = mjml(mjmlContent);

            // Remplacer les variables dynamiques
            const htmlContent = html
                .replace('{{prenom}}', user.prenom)
                .replace('{{nom}}', user.nom)
                .replace('{{resetLink}}', resetUrl);

            // Envoyer l'email
            await emailService.sendEmail({
                to: email,
                subject: 'R√©initialisation de votre mot de passe',
                text: `Vous avez demand√© la r√©initialisation de votre mot de passe. Cliquez sur le lien suivant pour le r√©initialiser : ${resetUrl}`,
                html: htmlContent
            });

            return res.status(200).json({ message: "Un email de r√©initialisation a √©t√© envoy√©" }); // R√©pondre que l'email a √©t√© envoy√©
        } catch (error) {
            console.error("Erreur lors de la r√©initialisation du mot de passe:", error); // G√©rer les erreurs
            return res.status(500).json({ message: "Erreur serveur" }); // R√©pondre avec une erreur serveur
        }
    }

    // üìå R√©initialisation effective du mot de passe
    async resetPassword(req, res) {
        const { token, id } = req.query; // R√©cup√©rer le token et l'ID depuis l'URL
        const { newPassword, confirmPassword } = req.body; // R√©cup√©rer les mots de passe depuis le corps de la requ√™te
    
        // V√©rifications de base
        if (!token || !id || !newPassword || !confirmPassword) {
            return res.status(400).json({ message: "Param√®tres manquants" });
        }
    
        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "Les mots de passe ne correspondent pas" });
        }
    
        try {
            // Hacher le token re√ßu
            const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
    
            // Trouver l'utilisateur avec le token hach√© et v√©rifier l'expiration
            const user = await User.findOne({
                _id: id,
                resetPasswordToken: hashedToken, // Comparer avec le token hach√© stock√©
                resetPasswordExpires: { $gt: Date.now() } // V√©rifier que le token n'a pas expir√©
            });
    
            if (!user) {
                return res.status(400).json({ message: "Token invalide ou expir√©" });
            }
    
            // Hacher le nouveau mot de passe
            user.motDePasse = await bcrypt.hash(newPassword, 10);
    
            // R√©initialiser les champs li√©s au token
            user.resetPasswordToken = undefined;
            user.resetPasswordExpires = undefined;
            user.resetPasswordAttempts = 0; // R√©initialiser les tentatives
            await user.save();
    
            // Charger le template MJML
            const mjmlFilePath = path.join(__dirname, '../../../src/templates/emails/passwordChanged/passwordChanged.mjml');
            const mjmlContent = fs.readFileSync(mjmlFilePath, 'utf8');

            // Compiler le MJML en HTML
            const { html } = mjml(mjmlContent);

            // Remplacer les variables dynamiques
            const htmlContent = html
                .replace('{{prenom}}', user.prenom)
                .replace('{{nom}}', user.nom)
                .replace('{{loginLink}}', 'https://jokko-health-front-end.vercel.app/login'); // Lien vers la page de connexion

            // Envoyer l'email
            await emailService.sendEmail({
                to: user.email,
                subject: 'R√©initialisation de mot de passe r√©ussie',
                text: 'Votre mot de passe a √©t√© r√©initialis√© avec succ√®s. Vous pouvez maintenant vous connecter √† votre compte.',
                html: htmlContent
            });
    
            // R√©ponse de succ√®s
            return res.status(200).json({ message: "Mot de passe r√©initialis√© avec succ√®s" });
    
        } catch (error) {
            console.error("Erreur dans resetPassword:", error);
            return res.status(500).json({ message: "Erreur serveur" });
        }
    }

    changePassword = async (req, res) => {
        console.log("D√©but de changePassword");
        const { currentPassword, newPassword, confirmPassword } = req.body;
        const userId = req.user?.id;

        console.log("Donn√©es re√ßues:", { userId, currentPassword: currentPassword ? "pr√©sent" : "absent", newPassword: newPassword ? "pr√©sent" : "absent", confirmPassword: confirmPassword ? "pr√©sent" : "absent" });

        // Validation des champs requis
        if (!currentPassword || !newPassword || !confirmPassword) {
            console.log("Champs manquants:", {
                currentPassword: !currentPassword,
                newPassword: !newPassword,
                confirmPassword: !confirmPassword
            });
            return res.status(400).json({ 
                message: "Tous les champs sont requis",
                details: {
                    currentPassword: !currentPassword ? "L'ancien mot de passe est requis" : null,
                    newPassword: !newPassword ? "Le nouveau mot de passe est requis" : null,
                    confirmPassword: !confirmPassword ? "La confirmation du mot de passe est requise" : null
                }
            });
        }

        // Validation de la correspondance des mots de passe
        if (newPassword !== confirmPassword) {
            console.log("Les mots de passe ne correspondent pas");
            return res.status(400).json({ 
                message: "Les nouveaux mots de passe ne correspondent pas" 
            });
        }

        try {
            console.log("Recherche de l'utilisateur avec l'ID:", userId);
            const user = await User.findById(userId);
            if (!user) {
                console.log("Utilisateur non trouv√©");
                return res.status(404).json({ message: "Utilisateur non trouv√©" });
            }

            // V√©rification des tentatives de changement de mot de passe
            const timeDifference = Date.now() - user.lastPasswordChangeAttempt;
            const timeLimit = 3600000; // 1 heure en millisecondes
            const maxAttempts = 5;

            console.log("V√©rification des tentatives:", {
                attempts: user.passwordChangeAttempts,
                timeDifference,
                timeLimit,
                maxAttempts
            });

            if (user.passwordChangeAttempts >= maxAttempts && timeDifference < timeLimit) {
                console.log("Trop de tentatives");
                return res.status(429).json({ 
                    message: `Trop de tentatives. Veuillez r√©essayer dans ${Math.floor((timeLimit - timeDifference) / 60000)} minutes.` 
                });
            }

            // V√©rification du mot de passe actuel
            console.log("V√©rification du mot de passe actuel");
            const isValid = await this._verifyPassword(user, currentPassword);
            console.log("R√©sultat de la v√©rification:", isValid);

            if (!isValid) {
                console.log("Mot de passe actuel incorrect");
                user.passwordChangeAttempts += 1;
                user.lastPasswordChangeAttempt = Date.now();
                await user.save();
                
                return res.status(401).json({ 
                    message: "L'ancien mot de passe est incorrect",
                    attemptsRemaining: maxAttempts - user.passwordChangeAttempts
                });
            }

            // V√©rification que le nouveau mot de passe est diff√©rent de l'ancien
            if (currentPassword === newPassword) {
                console.log("Le nouveau mot de passe est identique √† l'ancien");
                return res.status(400).json({ 
                    message: "Le nouveau mot de passe doit √™tre diff√©rent de l'ancien" 
                });
            }

            // Validation de la force du nouveau mot de passe
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                console.log("Le nouveau mot de passe ne respecte pas les crit√®res de force");
                return res.status(400).json({
                    message: "Le mot de passe doit contenir au moins 8 caract√®res, une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial"
                });
            }

            // Mise √† jour du mot de passe
            console.log("Hachage du nouveau mot de passe");
            user.motDePasse = await bcrypt.hash(newPassword, 12); // Augmentation du co√ªt de hachage
            user.passwordChangeAttempts = 0;
            user.lastPasswordChangeAttempt = Date.now();
            user.passwordChangedAt = Date.now();
            console.log("Sauvegarde de l'utilisateur");
            await user.save();

            // R√©cup√©ration et invalidation de tous les tokens existants
            console.log("V√©rification du token JWT");
            const token = req.cookies.jwt;
            if (token) {
                try {
                    console.log("V√©rification et d√©codage du token");
                    const decoded = jwt.verify(token, process.env.JWT_SECRET);
                    if (decoded) {
                        console.log("Cr√©ation du token blacklist√©");
                        const blacklistedToken = new BlacklistedToken({
                            token,
                            expiresAt: new Date(decoded.exp * 1000),
                            reason: 'password_change'
                        });
                        await blacklistedToken.save();
                    }
                } catch (jwtError) {
                    console.error("Erreur lors de la v√©rification du token:", jwtError);
                }
            }

            // Envoi de l'email de confirmation
            console.log("Pr√©paration de l'email de confirmation");
            const mjmlFilePath = path.join(__dirname, '../../../src/templates/emails/passwordChanged/passwordChanged.mjml');
            const mjmlContent = fs.readFileSync(mjmlFilePath, 'utf8');
            const { html } = mjml(mjmlContent);
            const htmlContent = html
                .replace('{{prenom}}', user.prenom)
                .replace('{{nom}}', user.nom)
                .replace('{{loginLink}}', 'https://jokko-health-front-end.vercel.app/login');

            console.log("Envoi de l'email");
            await emailService.sendEmail({
                to: user.email,
                subject: 'Confirmation du changement de mot de passe',
                text: 'Votre mot de passe a √©t√© chang√© avec succ√®s.',
                html: htmlContent
            });

            // Nettoyage des cookies
            console.log("Nettoyage des cookies");
            res.clearCookie('jwt');

            console.log("Changement de mot de passe r√©ussi");
            return res.status(200).json({ 
                message: "Mot de passe modifi√© avec succ√®s. Vous avez √©t√© d√©connect√©.",
                security: {
                    passwordChangedAt: user.passwordChangedAt,
                    nextPasswordChangeAllowed: new Date(Date.now() + timeLimit)
                }
            });

        } catch (error) {
            console.error("Erreur d√©taill√©e dans changePassword:", {
                userId,
                error: error.message,
                stack: error.stack,
                name: error.name
            });
            
            if (error.name === 'JsonWebTokenError') {
                return res.status(401).json({ message: "Token invalide" });
            }
            
            return res.status(500).json({ 
                message: "Une erreur est survenue lors du changement de mot de passe",
                error: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    // üìå V√©rification du mot de passe actuel
    verifyCurrentPassword = async (req, res) => {
        console.log("D√©but de verifyCurrentPassword");
        const { currentPassword } = req.body;
        const userId = req.user?.id;

        console.log("Donn√©es re√ßues:", { currentPassword, userId });

        if (!currentPassword) {
            console.log("Mot de passe actuel manquant");
            return res.status(400).json({ 
                message: "Le mot de passe actuel est requis",
                isValid: false
            });
        }

        if (!userId) {
            console.log("ID utilisateur manquant dans la requ√™te");
            return res.status(401).json({ 
                message: "Utilisateur non authentifi√©",
                isValid: false
            });
        }

        try {
            console.log("Recherche de l'utilisateur avec l'ID:", userId);
            const user = await User.findById(userId);
            if (!user) {
                console.log("Utilisateur non trouv√©");
                return res.status(404).json({ 
                    message: "Utilisateur non trouv√©",
                    isValid: false
                });
            }

            console.log("V√©rification du mot de passe");
            const isValid = await this._verifyPassword(user, currentPassword);
            console.log("R√©sultat de la v√©rification:", isValid);
            
            return res.status(200).json({ 
                message: isValid ? "Mot de passe correct" : "Mot de passe incorrect",
                isValid
            });

        } catch (error) {
            console.error("Erreur d√©taill√©e dans verifyCurrentPassword:", {
                message: error.message,
                stack: error.stack,
                name: error.name
            });
            return res.status(500).json({ 
                message: "Erreur serveur",
                isValid: false,
                error: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }
}

export default new PasswordController();
