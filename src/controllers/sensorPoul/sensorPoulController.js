import SensorPoul from '../../models/SensorPoul/SensorPoulModel.js'; // Utilisez la casse correcte
import mongoose from 'mongoose';

// üîî Ajouter des donn√©es de capteur
export const postSensorData = async (req, res) => {
    try {
        const { userId, heartRate, oxygenLevel } = req.body;

        // V√©rification que l'ID est un ObjectId valide
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ error: 'ID utilisateur invalide.' });
        }

        // V√©rification des donn√©es
        if (heartRate === undefined || oxygenLevel === undefined) {
            return res.status(400).json({ error: "Donn√©es invalides" });
        }

        // Cr√©ation d'une nouvelle entr√©e dans la base de donn√©es
        const newSensorPoul = new SensorPoul({ userId, heartRate, oxygenLevel });
        await newSensorPoul.save();

        res.status(201).json(newSensorPoul);
    } catch (error) {
        console.error("Erreur lors de l'enregistrement des donn√©es :", error);
        res.status(500).json({ error: "Erreur lors de l'enregistrement des donn√©es" });
    }
};

// üì© R√©cup√©rer toutes les donn√©es de capteur
export const getAllSensorData = async (req, res) => {
    try {
        const data = await SensorPoul.find().sort({ timestamp: -1 }); // R√©cup√©rer toutes les donn√©es de capteur
        res.status(200).json(data);
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des donn√©es" });
    }
};