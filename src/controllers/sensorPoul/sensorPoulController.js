import mongoose from 'mongoose';
import Sensor from '../../models/sensor/sensorModel.js';
import User from '../../models/user/userModel.js'; // Assurez-vous d'importer le mod√®le User
import { v4 as uuidv4 } from 'uuid'; // Importer uuid pour g√©n√©rer un sensorId unique
import MedicalRecord from '../../models/medical/medicalModel.js'; // Importer le mod√®le MedicalRecord

export const assignSensorToUser = async (req, res) => {
  try {
    const { macAddress, recordId } = req.body; // Utiliser recordId au lieu de userId

    console.log("Donn√©es re√ßues :", { macAddress, recordId }); // Log des donn√©es re√ßues

    // V√©rifier que les donn√©es n√©cessaires sont pr√©sentes
    if (!macAddress || !recordId) {
      console.log("Donn√©es manquantes :", { macAddress, recordId }); // Log des donn√©es manquantes
      return res.status(400).json({ message: "Adresse MAC et ID du dossier m√©dical n√©cessaires" });
    }

    // V√©rifier que recordId est un ObjectId valide
    if (!mongoose.Types.ObjectId.isValid(recordId)) {
      console.log("ID du dossier m√©dical invalide :", recordId); // Log de l'ID invalide
      return res.status(400).json({ message: "ID du dossier m√©dical invalide" });
    }

    // R√©cup√©rer le dossier m√©dical
    const medicalRecord = await MedicalRecord.findById(recordId);
    if (!medicalRecord) {
      console.log("Dossier m√©dical non trouv√© :", recordId); // Log du dossier m√©dical non trouv√©
      return res.status(404).json({ message: "Dossier m√©dical non trouv√©" });
    }

    // R√©cup√©rer l'ID de l'utilisateur (patient) √† partir du dossier m√©dical
    const userId = medicalRecord.patientId;
    if (!userId) {
      console.log("ID de l'utilisateur non trouv√© dans le dossier m√©dical :", medicalRecord); // Log de l'ID manquant
      return res.status(404).json({ message: "ID de l'utilisateur non trouv√© dans le dossier m√©dical" });
    }

    // V√©rifier si l'utilisateur existe
    const user = await User.findById(userId);
    if (!user) {
      console.log("Utilisateur non trouv√© :", userId); // Log de l'utilisateur non trouv√©
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // V√©rifier si le capteur existe d√©j√† et est assign√© √† un autre utilisateur
    const existingSensor = await Sensor.findOne({ mac: macAddress });
    if (existingSensor && existingSensor.user) {
      console.log("Capteur d√©j√† assign√© :", macAddress); // Log du capteur d√©j√† assign√©
      return res.status(400).json({ message: "Ce capteur est d√©j√† assign√© √† un utilisateur" });
    }

    // Si le capteur n'est pas encore assign√©, on peut l'assigner √† l'utilisateur
    const newSensor = new Sensor({
      mac: macAddress,
      user: userId, // Utiliser l'ID de l'utilisateur r√©cup√©r√©
      heartRate: 0, // Valeur par d√©faut
      spo2: 0, // Valeur par d√©faut
      anomalies: [],
      status: 'Active',
      sensorId: uuidv4(), // G√©n√©rer un sensorId unique
    });

    // Enregistrer le capteur
    await newSensor.save();

    console.log("Capteur assign√© avec succ√®s :", newSensor); // Log du capteur assign√©

    // R√©pondre au client
    res.status(200).json({
      message: "Capteur assign√© √† l'utilisateur avec succ√®s",
      sensor: newSensor,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de l'assignation du capteur :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

//M√©thode pour d√©tecter les anomalies dans les donn√©es du capteur
const detectAnomalies = (heartRate, oxygenLevel) => {
    let anomalies = [];

    // Anomalies de fr√©quence cardiaque
    if (heartRate < 50) {
        anomalies.push("Bradycardie d√©tect√©e! Fr√©quence cardiaque trop basse.");
    } else if (heartRate > 100) {
        anomalies.push("Tachycardie d√©tect√©e! Fr√©quence cardiaque trop √©lev√©e.");
    }

    // Anomalies de saturation en oxyg√®ne
    if (oxygenLevel < 90) {
        anomalies.push("Hypox√©mie d√©tect√©e! SpO2 trop bas.");
    }
    if (oxygenLevel < 85) {
        anomalies.push("Danger critique! SpO2 trop bas.");
    }

    return anomalies;
};

// M√©thode pour r√©cup√©rer toutes les donn√©es de capteur pour un utilisateur sp√©cifique
export const getAllSensorData = async (req, res) => {
    try {
        const { userId, startDate, endDate } = req.query; // R√©cup√©rer l'ID utilisateur et les dates

        let query = {};
        if (userId) {
            query.user = userId; // Filtrer par utilisateur
        }

        if (startDate && endDate) {
            query.timestamp = { $gte: new Date(startDate), $lte: new Date(endDate) }; // Filtrer par plage de dates
        }

        const data = await Sensor.find(query).sort({ timestamp: -1 }); // R√©cup√©rer les donn√©es filtr√©es
        res.status(200).json(data);
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};


// M√©thode pour supprimer un capteur
export const deleteSensor = async (req, res) => {
    try {
        const sensorId = req.params.id;
        const sensor = await Sensor.findById(sensorId);
        if (!sensor) {
            return res.status(404).json({ message: "Capteur non trouv√©" });
        }

        // Dissocier le capteur de l'utilisateur
        const userId = sensor.user;
        const user = await User.findById(userId);
        if (user) {
            // Suppression du capteur de la liste des capteurs de l'utilisateur
            user.sensors = user.sensors.filter(s => s.toString() !== sensorId);
            await user.save();
        }

        await sensor.remove();
        res.status(204).send();
        console.log(`Capteur ${sensorId} supprim√© avec succ√®s`);
    } catch (error) {
        console.error("Erreur lors de la suppression du capteur :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};


// M√©thode pour l'enregistrement des donn√©es du capteur pour un utilisateur sp√©cifique
export const receiveSensorDataForUser = async (req, res) => {
    try {
        const { heartRate, oxygenLevel, macAddress, timestamp, userId } = req.body;

        // V√©rifier que toutes les donn√©es n√©cessaires sont pr√©sentes
        if (!heartRate || !oxygenLevel || !macAddress || !timestamp || !userId) {
            return res.status(400).json({ message: "Donn√©es manquantes" });
        }

        // V√©rifier que les valeurs sont des nombres valides
        if (isNaN(heartRate) || isNaN(oxygenLevel)) {
            return res.status(400).json({ message: "Fr√©quence cardiaque et SpO2 doivent √™tre des valeurs num√©riques valides" });
        }

        // V√©rifier si l'utilisateur existe
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©" });
        }

        // V√©rifier si le capteur existe et est assign√© √† cet utilisateur
        const sensor = await Sensor.findOne({ mac: macAddress, user: userId });
        if (!sensor) {
            return res.status(400).json({ message: "Ce capteur n'est pas assign√© √† cet utilisateur" });
        }

        // D√©tecter les anomalies
        const anomalies = detectAnomalies(heartRate, oxygenLevel);

        // Mettre √† jour les donn√©es du capteur
        sensor.heartRate = heartRate;
        sensor.spo2 = oxygenLevel;
        sensor.timestamp = new Date(timestamp);
        sensor.anomalies = anomalies;

        // Sauvegarder les donn√©es du capteur mises √† jour
        await sensor.save();

        // R√©pondre au client
        res.status(200).json({
            message: "Donn√©es du capteur mises √† jour avec succ√®s",
            sensorData: sensor
        });
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©ception des donn√©es du capteur :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};


// Variable globale pour stocker les donn√©es re√ßues
let latestSensorData = null;

export const receiveSensorData = async (req, res) => {
    try {
        const { heartRate, oxygenLevel, macAddress, timestamp } = req.body;

        // V√©rifier que toutes les donn√©es sont bien re√ßues
        if (!heartRate || !oxygenLevel || !macAddress || !timestamp) {
            return res.status(400).json({ message: "Donn√©es manquantes" });
        }

        // Stocker les donn√©es re√ßues dans la variable globale
        latestSensorData = { heartRate, oxygenLevel, macAddress, timestamp };

        // Affichage des donn√©es dans la console du serveur
        console.log("üîπ Donn√©es re√ßues depuis ESP8266 :");
        console.log(`üíì Fr√©quence cardiaque : ${heartRate} BPM`);
        console.log(`ü©∏ Saturation O2 : ${oxygenLevel}%`);
        console.log(`üì° Adresse MAC : ${macAddress}`);
        console.log(`üï∞Ô∏è Heure des donn√©es : ${timestamp}`);

        // R√©pondre au client (ESP8266)
        res.status(200).json({
            message: "Donn√©es re√ßues avec succ√®s",
            data: { heartRate, oxygenLevel, macAddress, timestamp }
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©ception des donn√©es :", error);
        res.status(500).json({ message: "Erreur serveur" });
    }
};

// Endpoint pour r√©cup√©rer les derni√®res donn√©es
export const getLatestSensorData = async (req, res) => {
    try {
      if (!latestSensorData) {
        return res.status(404).json({ message: "Aucune donn√©e disponible" });
      }
      console.log("Donn√©es envoy√©es au client :", latestSensorData); // Log des donn√©es envoy√©es
      res.status(200).json(latestSensorData);
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  };