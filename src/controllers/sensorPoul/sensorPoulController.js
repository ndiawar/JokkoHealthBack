import mongoose from 'mongoose';
import Sensor from '../../models/sensor/sensorModel.js';
import User from '../../models/user/userModel.js'; // Assurez-vous d'importer le mod√®le User
import { v4 as uuidv4 } from 'uuid'; // Importer uuid pour g√©n√©rer un sensorId unique
import MedicalRecord from '../../models/medical/medicalModel.js'; // Importer le mod√®le MedicalRecord

// Store pour les connexions SSE
const activeConnections = new Map();
let latestSensorData = null;


export const assignSensorToUser = async (req, res) => {
  try {
    const { macAddress, recordId } = req.body; // Utiliser recordId au lieu de userId

    console.log("Donn√©es re√ßues :", { macAddress, recordId }); // Log des donn√©es re√ßues

    // V√©rifier que les donn√©es n√©cessaires sont pr√©sentes
    if (!macAddress || !recordId) {
      console.log("Donn√©es manquantes :", { macAddress, recordId }); // Log des donn√©es manquantes
      return res.status(400).json({ message: "Adresse MAC et ID du dossier m√©dical n√©cessaires" });
    }

    // V√©rifier que recordId est un ObjectId valide
    if (!mongoose.Types.ObjectId.isValid(recordId)) {
      console.log("ID du dossier m√©dical invalide :", recordId); // Log de l'ID invalide
      return res.status(400).json({ message: "ID du dossier m√©dical invalide" });
    }

    // V√©rifier que req.user est d√©fini
    if (!req.user || !req.user._id) {
      console.log("Utilisateur non authentifi√©"); // Log de l'utilisateur non authentifi√©
      return res.status(401).json({ message: "Utilisateur non authentifi√©" });
    }

    const medecinId = req.user._id; // Supposant que l'authentification est en place

    // R√©cup√©rer le dossier m√©dical
    const medicalRecord = await MedicalRecord.findById(recordId);
    if (!medicalRecord) {
      console.log("Dossier m√©dical non trouv√© :", recordId); // Log du dossier m√©dical non trouv√©
      return res.status(404).json({ message: "Dossier m√©dical non trouv√©" });
    }

    // R√©cup√©rer l'ID de l'utilisateur (patient) √† partir du dossier m√©dical
    const userId = medicalRecord.patientId;
    if (!userId) {
      console.log("ID de l'utilisateur non trouv√© dans le dossier m√©dical :", medicalRecord); // Log de l'ID manquant
      return res.status(404).json({ message: "ID de l'utilisateur non trouv√© dans le dossier m√©dical" });
    }
    
    // V√©rifier si l'utilisateur existe
    const user = await User.findById(userId);
    if (!user) {
      console.log("Utilisateur non trouv√© :", userId); // Log de l'utilisateur non trouv√©
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // V√©rifier si le capteur existe d√©j√† et est assign√© √† un autre dossier m√©dical
    const existingSensor = await Sensor.findOne({ mac: macAddress });
    if (existingSensor && existingSensor.medicalRecord) {
      console.log("Capteur d√©j√† assign√© :", macAddress); // Log du capteur d√©j√† assign√©
      return res.status(400).json({ message: "Ce capteur est d√©j√† assign√© √† un dossier m√©dical" });
    }

    // Si le capteur n'est pas encore assign√©, on peut l'assigner au dossier m√©dical
    const newSensor = new Sensor({
      mac: macAddress,
      medicalRecord: recordId, // Utiliser l'ID du dossier m√©dical r√©cup√©r√©
      heartRate: 0, // Valeur par d√©faut
      spo2: 0, // Valeur par d√©faut
      anomalies: [],
      status: 'Active',
      sensorId: uuidv4(), // G√©n√©rer un sensorId unique
    });

    // Enregistrer le capteur
    await newSensor.save();

    // Apr√®s await newSensor.save();
    medicalRecord.sensor = newSensor._id;
    await medicalRecord.save();

    console.log("Capteur assign√© avec succ√®s :", newSensor); // Log du capteur assign√©

    // R√©pondre au client
    res.status(200).json({
      message: "Capteur assign√© au dossier m√©dical avec succ√®s",
      sensor: newSensor,
      medicalRecord: medicalRecord // Inclure le dossier m√©dical dans la r√©ponse
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de l'assignation du capteur :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// M√©thode pour recevoir et mettre √† jour les donn√©es du capteur en temps r√©el
export const receiveSensorData = async (req, res) => {
  try {
    let { heartRate, oxygenLevel, macAddress, timestamp } = req.body; // Changer const en let pour pouvoir r√©assigner timestamp

    // Log des donn√©es re√ßues pour v√©rifier qu'elles sont bien envoy√©es
    console.log("üîπ Donn√©es re√ßues depuis ESP8266 :");
    console.log(`üíì Fr√©quence cardiaque : ${heartRate} BPM`);
    console.log(`ü©∏ Saturation O2 : ${oxygenLevel}%`);
    console.log(`üì° Adresse MAC : ${macAddress}`);
    console.log(`üï∞Ô∏è Heure des donn√©es : ${timestamp}`);

    // V√©rifier que toutes les donn√©es n√©cessaires sont bien re√ßues
    if (!heartRate || !oxygenLevel || !macAddress || !timestamp) {
      console.log("‚ùå Erreur : Donn√©es manquantes");
      return res.status(400).json({ message: "Donn√©es manquantes" });
    }

    // Validation de la fr√©quence cardiaque et de la saturation en oxyg√®ne
    if (!validateHeartRate(heartRate) || !validateOxygenLevel(oxygenLevel)) {
      return res.status(400).json({ message: "Donn√©es invalides" });
    }

    // Si le timestamp est au format "HH:mm:ss", ajouter une date par d√©faut (par exemple, aujourd'hui)
    let date = new Date(); // Date actuelle
    if (timestamp && !timestamp.includes("T")) {
      // Ajouter la date actuelle pour construire une date compl√®te
      const [hour, minute, second] = timestamp.split(":");
      date.setHours(hour, minute, second, 0);  // R√©glage de l'heure, minute, seconde
      // Mettre √† jour le format du timestamp
      timestamp = date.toISOString();  // Transforme en format ISO
    }

    // Recherche du capteur via l'adresse MAC
    console.log("üîç Recherche du capteur avec l'adresse MAC :", macAddress);
    const sensor = await Sensor.findOne({ mac: macAddress });

    if (!sensor) {
      console.log("‚ùå Erreur : Capteur non trouv√© pour l'adresse MAC", macAddress);
      return res.status(404).json({ message: "Capteur non trouv√©" });
    }

    // Mise √† jour des donn√©es du capteur avec les nouvelles valeurs
    console.log("üì¶ Mise √† jour des donn√©es du capteur avec les nouvelles valeurs...");
    sensor.heartRate = heartRate;
    sensor.spo2 = oxygenLevel;
    sensor.timestamp = timestamp;

    // D√©tection des anomalies
    const anomalies = detectAnomalies(heartRate, oxygenLevel);
    sensor.anomalies = anomalies;

    // Sauvegarde du capteur mis √† jour dans la base de donn√©es
    console.log("üíæ Sauvegarde des donn√©es mises √† jour dans la base de donn√©es...");
    await sensor.save();

    // Apr√®s await sensor.save();
    latestSensorData = {
      heartRate,
      oxygenLevel,
      macAddress,
      timestamp,
      anomalies
    };

    // Apr√®s la mise √† jour de latestSensorData
    if (activeConnections.has(sensor.medicalRecord.toString())) {
      const clients = activeConnections.get(sensor.medicalRecord.toString());
      for (const client of clients) {
        client.write(`data: ${JSON.stringify(latestSensorData)}\n\n`);
      }
    }

    // Log des anomalies d√©tect√©es (si elles existent)
    if (anomalies.length > 0) {
      console.log("üö® Anomalies d√©tect√©es :", anomalies);
    } else {
      console.log("‚úÖ Aucune anomalie d√©tect√©e.");
    }

    // R√©ponse au client (ESP8266)
    console.log("‚úÖ R√©ponse envoy√©e au client avec succ√®s.");
    res.status(200).json({
      message: "Donn√©es re√ßues et mises √† jour avec succ√®s",
      sensorData: {
        heartRate,
        oxygenLevel,
        macAddress,
        timestamp,
        anomalies
      }
    });

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©ception des donn√©es :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// Endpoint pour r√©cup√©rer les derni√®res donn√©es
export const getLatestSensorData = async (req, res) => {
  try {
    if (!latestSensorData) {
      return res.status(404).json({ message: "Aucune donn√©e disponible" });
    }
    console.log("Donn√©es envoy√©es au client :", latestSensorData); // Log des donn√©es envoy√©es
    res.status(200).json(latestSensorData);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};


// Endpoint pour r√©cup√©rer les donn√©es du capteur pour un dossier m√©dical donn√©
export const getSensorDataByRecordId = async (req, res) => {
  try {
    const { recordId } = req.params;

    // V√©rifier que recordId est un ObjectId valide
    if (!mongoose.Types.ObjectId.isValid(recordId)) {
      console.log("ID du dossier m√©dical invalide :", recordId);
      return res.status(400).json({ message: "ID du dossier m√©dical invalide" });
    }

    // Recherche du dossier m√©dical en fonction de l'ID du dossier m√©dical
    const medicalRecord = await MedicalRecord.findOne({ _id: recordId });

    // V√©rifier si le dossier m√©dical existe
    if (!medicalRecord) {
      console.log("‚ùå Dossier m√©dical non trouv√© pour cet ID.");
      return res.status(404).json({ message: "Dossier m√©dical non trouv√©." });
    }

    // Recherche du capteur associ√© √† ce dossier m√©dical
    const sensorData = await Sensor.findOne({ medicalRecord: recordId });

    // V√©rifier si le capteur existe pour ce dossier m√©dical
    if (!sensorData) {
      console.log("‚ùå Capteur non trouv√© pour l'ID du dossier m√©dical", recordId);
      return res.status(404).json({ message: "Capteur non trouv√© pour ce dossier m√©dical." });
    }

    // R√©pondre au client avec les donn√©es du capteur en temps r√©el
    res.status(200).json({
      sensorId: sensorData.sensorId,
      mac: sensorData.mac,
      heartRate: sensorData.heartRate,
      spo2: sensorData.spo2,
      anomalies: sensorData.anomalies,
      status: sensorData.status,
      timestamp: sensorData.timestamp,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es du capteur :", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des donn√©es du capteur." });
  }
};


// Endpoint pour r√©cup√©rer les donn√©es du capteur pour tous les patients
export const getSensorDataForCurrentPatient = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est bien authentifi√©
    if (!req.user) {
      console.log("‚ùå Utilisateur non authentifi√©");
      return res.status(401).json({ message: "Utilisateur non authentifi√©" });
    }

    const { id: userId, role } = req.user;
    console.log(`üîç Recherche des donn√©es pour l'utilisateur: ${userId}, r√¥le: ${role}`);

    // V√©rifier si l'utilisateur est un patient
    if (role !== 'Patient') {
      console.log(`‚ùå R√¥le invalide: ${role}, attendu: Patient`);
      return res.status(403).json({ message: "Acc√®s refus√© : Seul un patient peut acc√©der √† ses donn√©es de capteur." });
    }

    // Recherche du dossier m√©dical en fonction de l'ID de l'utilisateur (patientId)
    const medicalRecord = await MedicalRecord.findOne({ patientId: userId });
    console.log(`üìÅ Dossier m√©dical trouv√©: ${medicalRecord ? 'Oui' : 'Non'}`);

    // V√©rifier si le dossier m√©dical existe pour ce patient
    if (!medicalRecord) {
      console.log(`‚ùå Dossier m√©dical non trouv√© pour l'utilisateur: ${userId}`);
      return res.status(404).json({ message: "Dossier m√©dical non trouv√© pour cet utilisateur." });
    }

    // Recherche du capteur associ√© √† ce dossier m√©dical
    const sensorData = await Sensor.findOne({ medicalRecord: medicalRecord._id });
    console.log(`üì° Capteur trouv√©: ${sensorData ? 'Oui' : 'Non'}`);

    // V√©rifier si le capteur existe pour ce dossier m√©dical
    if (!sensorData) {
      console.log(`‚ùå Capteur non trouv√© pour le dossier m√©dical: ${medicalRecord._id}`);
      return res.status(404).json({ message: "Capteur non trouv√© pour ce dossier m√©dical." });
    }

    // R√©pondre au client avec les donn√©es du capteur
    console.log(`‚úÖ Donn√©es du capteur r√©cup√©r√©es avec succ√®s pour l'utilisateur: ${userId}`);
    res.status(200).json({
      message: "Donn√©es du capteur r√©cup√©r√©es avec succ√®s",
      sensorData: {
        sensorId: sensorData.sensorId,
        mac: sensorData.mac,
        heartRate: sensorData.heartRate,
        spo2: sensorData.spo2,
        anomalies: sensorData.anomalies,
        status: sensorData.status,
        timestamp: sensorData.timestamp,
      },
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es du capteur :", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des donn√©es du capteur." });
  }
};

// Nouvelle m√©thode pour r√©cup√©rer les donn√©es du capteur pour l'utilisateur connect√©
export const getSensorDataForCurrentUser = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est authentifi√©
    if (!req.user || !req.user._id) {
      console.log("Utilisateur non authentifi√©"); // Log de l'utilisateur non authentifi√©
      return res.status(401).json({ message: "Utilisateur non authentifi√©" });
    }

    const userId = req.user._id;
    console.log("Utilisateur authentifi√© :", userId); // Log de l'utilisateur authentifi√©

    // R√©cup√©rer le dossier m√©dical de l'utilisateur
    const medicalRecord = await MedicalRecord.findOne({ patientId: userId });
    if (!medicalRecord) {
      console.log("Dossier m√©dical non trouv√© pour l'utilisateur :", userId); // Log du dossier m√©dical non trouv√©
      return res.status(404).json({ message: "Dossier m√©dical non trouv√©" });
    }

    // V√©rifier si un capteur est assign√© au dossier m√©dical
    const sensor = await Sensor.findOne({ medicalRecord: medicalRecord._id });
    if (!sensor) {
      console.log("Capteur non trouv√© pour le dossier m√©dical :", medicalRecord._id); // Log du capteur non trouv√©
      return res.status(404).json({ message: "Capteur non trouv√©" });
    }

    // R√©pondre au client avec les donn√©es du capteur
    res.status(200).json(sensor);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es du capteur pour l'utilisateur connect√© :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// Validation de la fr√©quence cardiaque r√©aliste
const validateHeartRate = (heartRate) => {
  // Fr√©quence cardiaque trop basse (inf√©rieure √† 40) ou trop √©lev√©e (sup√©rieure √† 200)
  if (heartRate < 40 || heartRate > 200) {
    console.log("‚ùå Fr√©quence cardiaque irr√©aliste d√©tect√©e. La valeur a √©t√© ignor√©e.");
    return false;
  }
  return true;
};

// D√©tection des anomalies
const detectAnomalies = (heartRate, oxygenLevel) => {
  let anomalies = [];

  // Anomalies de fr√©quence cardiaque
  if (heartRate < 40) {
    anomalies.push("Bradycardie extr√™me d√©tect√©e! Fr√©quence cardiaque trop basse.");
  } else if (heartRate < 50) {
    anomalies.push("Bradycardie d√©tect√©e! Fr√©quence cardiaque trop basse.");
  } else if (heartRate > 100) {
    anomalies.push("Tachycardie d√©tect√©e! Fr√©quence cardiaque trop √©lev√©e.");
  }

  // Anomalies de saturation en oxyg√®ne
  if (oxygenLevel < 90) {
    anomalies.push("Hypox√©mie d√©tect√©e! SpO2 trop bas.");
  }
  if (oxygenLevel < 85) {
    anomalies.push("Danger critique! SpO2 trop bas.");
  }

  return anomalies;
};

// Validation de la saturation en oxyg√®ne r√©aliste
const validateOxygenLevel = (oxygenLevel) => {
  // La saturation en oxyg√®ne doit √™tre entre 0 et 100 %
  if (oxygenLevel < 0 || oxygenLevel > 100) {
    console.log("‚ùå Saturation O2 irr√©aliste d√©tect√©e. La valeur a √©t√© ignor√©e.");
    return false;
  }
  return true;
};